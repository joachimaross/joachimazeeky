name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  # Security and Quality Checks
  security-check:
    name: 🔒 Security & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Scan for Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: 📊 Code Quality Scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_CSS: true
          VALIDATE_HTML: true

  # Build and Test
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: security-check
    
    outputs:
      build-artifact: ${{ steps.build.outputs.artifact-id }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm run postinstall || true

      - name: 🧪 Run Tests
        run: |
          npm run test:ci || npm run test || echo "No tests configured"

      - name: 🔍 Lint Code
        run: |
          npm run lint || echo "No linting configured"

      - name: 📊 Type Check
        run: |
          npm run typecheck || echo "No type checking configured"

      - name: 🏗️ Build Production
        id: build
        run: |
          # Copy production environment
          cp .env.production .env.local || cp .env.example .env.local
          
          # Build the application
          npm run build
          
          # Verify build output
          if [ ! -d "build" ]; then
            echo "❌ Build failed - no build directory"
            exit 1
          fi
          
          if [ ! -f "build/index.html" ]; then
            echo "❌ Build failed - no index.html"
            exit 1
          fi
          
          echo "✅ Build completed successfully"
          echo "artifact-id=build-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 🗜️ Optimize Build
        run: |
          # Install optimization tools
          npm install -g terser clean-css-cli
          
          # Compress JavaScript files
          find build/static/js -name "*.js" -exec terser {} -o {} -c -m \; || true
          
          # Compress CSS files
          find build/static/css -name "*.css" -exec cleancss -o {} {} \; || true
          
          echo "✅ Build optimization completed"

      - name: 📦 Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-id }}
          path: build/
          retention-days: 30

  # Security Scan of Build
  security-scan-build:
    name: 🛡️ Security Scan Build
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-and-test.outputs.build-artifact }}
          path: build/

      - name: 🔍 Scan for Exposed Secrets
        run: |
          # Check for API keys or secrets in build
          if grep -r "sk-" build/ 2>/dev/null; then
            echo "❌ Potential API keys found in build!"
            exit 1
          fi
          
          if grep -r "pk_live" build/ 2>/dev/null; then
            echo "❌ Live payment keys found in build!"
            exit 1
          fi
          
          echo "✅ No exposed secrets found"

      - name: 📊 Build Analysis
        run: |
          # Check build size
          BUILD_SIZE=$(du -sh build/ | cut -f1)
          echo "📦 Build size: $BUILD_SIZE"
          
          # Check for localhost URLs
          if grep -r "localhost" build/ 2>/dev/null; then
            echo "⚠️ Localhost URLs found in build"
          fi
          
          echo "✅ Build analysis completed"

  # Deploy to Firebase Hosting
  deploy-firebase:
    name: 🌐 Deploy to Firebase
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan-build]
    environment: 
      name: production
      url: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-and-test.outputs.build-artifact }}
          path: build/

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔥 Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ env.FIREBASE_PROJECT_ID }}

      - name: 🔥 Deploy Firebase Rules
        run: |
          # Install Firebase CLI
          npm install -g firebase-tools
          
          # Deploy Firestore and Storage rules
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=firebase-key.json
          
          firebase deploy --only firestore:rules,storage --project ${{ env.FIREBASE_PROJECT_ID }} --non-interactive
          
          rm firebase-key.json

  # Initialize Admin Account
  initialize-admin:
    name: 👤 Initialize Admin Account
    runs-on: ubuntu-latest
    needs: deploy-firebase
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        run: npm install firebase-admin

      - name: 👤 Initialize Joachima Admin
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-key.json
          
          node -e "
          const admin = require('firebase-admin');
          const serviceAccount = require('./firebase-key.json');
          
          admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
          });
          
          async function setupAdmin() {
            try {
              // Check if admin exists and has signed up
              const userRecord = await admin.auth().getUserByEmail('joachimaross@gmail.com');
              
              // Set super admin claims
              await admin.auth().setCustomUserClaims(userRecord.uid, {
                admin: true,
                superAdmin: true,
                adminLevel: 10,
                lastClaimUpdate: Date.now()
              });
              
              console.log('✅ Admin claims updated for Joachima Ross Jr');
            } catch (error) {
              if (error.code === 'auth/user-not-found') {
                console.log('ℹ️ Admin user not found - they need to sign up first');
              } else {
                console.error('❌ Admin setup failed:', error);
              }
            }
          }
          
          setupAdmin().then(() => process.exit(0)).catch(console.error);
          "
          
          rm firebase-key.json

  # Health Check
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy-firebase
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏥 Run Health Check
        run: |
          node scripts/health-check.js
        env:
          REACT_APP_DOMAIN: ${{ env.FIREBASE_PROJECT_ID }}.web.app

      - name: 📊 Upload Health Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: health-report-${{ github.sha }}
          path: health-report-*.json

  # Notify Success
  notify-success:
    name: 🎉 Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-firebase, health-check]
    if: success()
    
    steps:
      - name: 🎉 Deployment Success Notification
        run: |
          echo "🎉 Zeeky AI deployed successfully!"
          echo "🌐 Live URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app"
          echo "📊 Health Check: Passed"
          echo "⏰ Deployment Time: $(date)"

      - name: 📧 Send Success Email
        if: github.ref == 'refs/heads/main'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✅ Zeeky AI Production Deployment Successful"
          to: joachimaross@gmail.com
          from: deploy@zeeky.ai
          body: |
            🎉 Zeeky AI has been successfully deployed to production!
            
            📋 Deployment Details:
            • Environment: Production
            • Commit: ${{ github.sha }}
            • Branch: ${{ github.ref_name }}
            • Deployer: ${{ github.actor }}
            • Timestamp: $(date)
            
            🌐 Live URLs:
            • Main Site: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
            • Admin Dashboard: https://${{ env.FIREBASE_PROJECT_ID }}.web.app/admin
            
            📊 Health Check: All systems operational
            
            🚀 Next Steps:
            1. Visit the live site and test functionality
            2. Sign in with joachimaross@gmail.com to activate admin
            3. Monitor performance and error rates
            
            Have a great day!
            The Zeeky AI Deployment System

  # Notify Failure
  notify-failure:
    name: 🚨 Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [deploy-firebase, health-check]
    if: failure()
    
    steps:
      - name: 🚨 Deployment Failure Notification
        run: |
          echo "🚨 Zeeky AI deployment failed!"
          echo "🔍 Check the workflow logs for details"
          echo "⏰ Failure Time: $(date)"

      - name: 📧 Send Failure Alert
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 Zeeky AI Production Deployment Failed"
          to: joachimaross@gmail.com
          from: deploy@zeeky.ai
          body: |
            🚨 Zeeky AI production deployment has failed!
            
            📋 Failure Details:
            • Environment: Production
            • Commit: ${{ github.sha }}
            • Branch: ${{ github.ref_name }}
            • Attempted by: ${{ github.actor }}
            • Timestamp: $(date)
            
            🔍 Next Steps:
            1. Check the GitHub Actions workflow logs
            2. Review the build and deployment steps
            3. Fix any issues and retry deployment
            
            🔗 Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Please investigate and resolve the issue as soon as possible.
            
            The Zeeky AI Deployment System